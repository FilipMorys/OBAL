%% Import data from text file.
% Script for importing data from the following text file:
%
%    /dagher/dagher11/filip/OBAL/output/WMH_VOL_mediation.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2020/02/18 11:33:17

%% Initialize variables.
filename = '/dagher/dagher11/filip/OBAL/output/WMH_VOL_mediation_WHR.csv';
delimiter = ',';
startRow = 2;

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
WMHVOLmediation = [dataArray{1:end-1}];
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% Import data from text file.
% Script for importing data from the following text file:
%
%    /dagher/dagher11/filip/OBAL/output/wholebrain_pval.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2020/01/23 15:16:17

%% Initialize variables.
filename = '/dagher/dagher11/filip/OBAL/output/wholebrainVOLWHR_pval.csv';
delimiter = {''};
startRow = 2;

%% Format for each line of text:
%   column1: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
wholebrainpval = [dataArray{1:end-1}];
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% Initialize variables.
filename = '/dagher/dagher11/filip/OBAL/output/wholebrainVOLWHR_tval.csv';
delimiter = {''};
startRow = 2;

%% Format for each line of text:
%   column1: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
wholebraintval = [dataArray{1:end-1}];
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;
WMHVOLmediation(:,5)=wholebraintval;
WMHVOLmediation(:,6)=wholebrainpval;


%%%%%%%%%% PLOT DKT MAPS %%%%%%%%%%
addpath(genpath('/dagher/dagher11/filip/Software/freesurfer_statsurf_display/'))


WMHVOLmediation((WMHVOLmediation(:,2)>0.05 | WMHVOLmediation(:,6)>0.05 | WMHVOLmediation(:,9)>0.05 | WMHVOLmediation(:,5)>0),:)=NaN; % Only if ACME sig / toital significant / total estimate is < 0 (negative rel. between BMI and VOL) / WMH -> VOL significant / 
maskvals=WMHVOLmediation(:,2)<0.05;

freesurfer_statsurf_scalar({WMHVOLmediation(1:31,7),WMHVOLmediation(32:62,7)},{maskvals(1:31),maskvals(32:62)},'dkt','UseShortLabels', false, 'MedialLateralLabels', false, 'MainTitle', 'Proportion mediated WHR - WMH - VOL','ScalarName','Proportion mediated')
saveas(gcf,'WHR_WMH_VOL_proportion.tif')

%figure(6)
%freesurfer_statsurf_scalar({WMHVOLmediation(1:31,5),WMHVOLmediation(32:62,5)},{maskvals(1:31),maskvals(32:62)},'dkt','UseShortLabels', false, 'MedialLateralLabels', false, 'MainTitle', 'ADE WHR - WMH - VOL','ScalarName','estimate')

%figure(7)
%freesurfer_statsurf_scalar({WMHVOLmediation(1:31,1),WMHVOLmediation(32:62,1)},{maskvals(1:31),maskvals(32:62)},'dkt','UseShortLabels', false, 'MedialLateralLabels', false, 'MainTitle', 'ACME effect WHR - WMH - VOL','ScalarName','ACME estimate')